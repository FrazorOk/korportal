{"ast":null,"code":"import { graphConfig } from '../authConfig';\n\n/**\n * Attaches a given access token to a MS Graph API call. Returns information about the user\n * @param accessToken\n */\nexport async function callMe(accessToken) {\n  const headers = new Headers();\n  const bearer = `Bearer ${accessToken}`;\n  headers.append('Authorization', bearer);\n  const options = {\n    method: 'GET',\n    headers: headers\n  };\n  return fetch(graphConfig.graphMeEndpoint, options).then(response => response.json()).catch(error => console.log(error));\n}\nexport async function callPhoto(accessToken) {\n  const headers = new Headers();\n  const bearer = `Bearer ${accessToken}`;\n  headers.append('Authorization', bearer);\n  const options = {\n    method: 'GET',\n    headers: headers\n  };\n  return fetch('https://graph.microsoft.com/v1.0/me/photo/$value', options).then(response => response).catch(error => console.log(error));\n}\nexport async function getGroups(accessToken) {\n  const headers = new Headers();\n  const bearer = `Bearer ${accessToken}`;\n  headers.append('Authorization', bearer);\n  const options = {\n    method: 'GET',\n    headers: headers\n  };\n  return fetch('https://graph.microsoft.com/beta/groups', options).then(response => response).catch(error => console.log(error));\n}\nexport async function getAllUsers(accessToken) {\n  const headers = new Headers();\n  const bearer = `Bearer ${accessToken}`;\n  headers.append('Authorization', bearer);\n  const options = {\n    method: 'GET',\n    headers: headers\n  };\n\n  // https://graph.microsoft.com/v1.0/users?$top=999&$select=DisplayName,accountEnabled,userPrincipalName,jobTitle,onPremisesExtensionAttributes\n\n  return fetch('https://graph.microsoft.com/users/4af0fe36-d384-4634-a344-f706b61c1158/memberOf', options).then(response => response).catch(error => console.log(error));\n}","map":{"version":3,"names":["graphConfig","callMe","accessToken","headers","Headers","bearer","append","options","method","fetch","graphMeEndpoint","then","response","json","catch","error","console","log","callPhoto","getGroups","getAllUsers"],"sources":["E:/web/web/2024/ms-korportal/src/api/graph.js"],"sourcesContent":["import { graphConfig } from '../authConfig';\n\n/**\n * Attaches a given access token to a MS Graph API call. Returns information about the user\n * @param accessToken\n */\nexport async function callMe(accessToken) {\n\tconst headers = new Headers();\n\tconst bearer = `Bearer ${accessToken}`;\n\n\theaders.append('Authorization', bearer);\n\n\tconst options = {\n\t\tmethod: 'GET',\n\t\theaders: headers,\n\t};\n\n\treturn fetch(graphConfig.graphMeEndpoint, options)\n\t\t.then((response) => response.json())\n\t\t.catch((error) => console.log(error));\n}\nexport async function callPhoto(accessToken) {\n\tconst headers = new Headers();\n\tconst bearer = `Bearer ${accessToken}`;\n\n\theaders.append('Authorization', bearer);\n\tconst options = {\n\t\tmethod: 'GET',\n\t\theaders: headers,\n\t};\n\n\treturn fetch('https://graph.microsoft.com/v1.0/me/photo/$value', options)\n\t\t.then((response) => response)\n\t\t.catch((error) => console.log(error));\n}\nexport async function getGroups(accessToken) {\n\tconst headers = new Headers();\n\tconst bearer = `Bearer ${accessToken}`;\n\n\theaders.append('Authorization', bearer);\n\tconst options = {\n\t\tmethod: 'GET',\n\t\theaders: headers,\n\t};\n\n\treturn fetch('https://graph.microsoft.com/beta/groups', options)\n\t\t.then((response) => response)\n\t\t.catch((error) => console.log(error));\n}\nexport async function getAllUsers(accessToken) {\n\tconst headers = new Headers();\n\tconst bearer = `Bearer ${accessToken}`;\n\n\theaders.append('Authorization', bearer);\n\tconst options = {\n\t\tmethod: 'GET',\n\t\theaders: headers,\n\t};\n\n\t// https://graph.microsoft.com/v1.0/users?$top=999&$select=DisplayName,accountEnabled,userPrincipalName,jobTitle,onPremisesExtensionAttributes\n\n\treturn fetch('https://graph.microsoft.com/users/4af0fe36-d384-4634-a344-f706b61c1158/memberOf', options)\n\t\t.then((response) => response)\n\t\t.catch((error) => console.log(error));\n}\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,eAAe;;AAE3C;AACA;AACA;AACA;AACA,OAAO,eAAeC,MAAMA,CAACC,WAAW,EAAE;EACzC,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAAC;EAC7B,MAAMC,MAAM,GAAG,UAAUH,WAAW,EAAE;EAEtCC,OAAO,CAACG,MAAM,CAAC,eAAe,EAAED,MAAM,CAAC;EAEvC,MAAME,OAAO,GAAG;IACfC,MAAM,EAAE,KAAK;IACbL,OAAO,EAAEA;EACV,CAAC;EAED,OAAOM,KAAK,CAACT,WAAW,CAACU,eAAe,EAAEH,OAAO,CAAC,CAChDI,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCC,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACvC;AACA,OAAO,eAAeG,SAASA,CAAChB,WAAW,EAAE;EAC5C,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAAC;EAC7B,MAAMC,MAAM,GAAG,UAAUH,WAAW,EAAE;EAEtCC,OAAO,CAACG,MAAM,CAAC,eAAe,EAAED,MAAM,CAAC;EACvC,MAAME,OAAO,GAAG;IACfC,MAAM,EAAE,KAAK;IACbL,OAAO,EAAEA;EACV,CAAC;EAED,OAAOM,KAAK,CAAC,kDAAkD,EAAEF,OAAO,CAAC,CACvEI,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAAC,CAC5BE,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACvC;AACA,OAAO,eAAeI,SAASA,CAACjB,WAAW,EAAE;EAC5C,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAAC;EAC7B,MAAMC,MAAM,GAAG,UAAUH,WAAW,EAAE;EAEtCC,OAAO,CAACG,MAAM,CAAC,eAAe,EAAED,MAAM,CAAC;EACvC,MAAME,OAAO,GAAG;IACfC,MAAM,EAAE,KAAK;IACbL,OAAO,EAAEA;EACV,CAAC;EAED,OAAOM,KAAK,CAAC,yCAAyC,EAAEF,OAAO,CAAC,CAC9DI,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAAC,CAC5BE,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACvC;AACA,OAAO,eAAeK,WAAWA,CAAClB,WAAW,EAAE;EAC9C,MAAMC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAAC;EAC7B,MAAMC,MAAM,GAAG,UAAUH,WAAW,EAAE;EAEtCC,OAAO,CAACG,MAAM,CAAC,eAAe,EAAED,MAAM,CAAC;EACvC,MAAME,OAAO,GAAG;IACfC,MAAM,EAAE,KAAK;IACbL,OAAO,EAAEA;EACV,CAAC;;EAED;;EAEA,OAAOM,KAAK,CAAC,iFAAiF,EAAEF,OAAO,CAAC,CACtGI,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAAC,CAC5BE,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;AACvC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}